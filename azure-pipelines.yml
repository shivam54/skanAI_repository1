trigger:
- main

pool:
  name: shivamPool

jobs:
- job: InstallDependencies
  displayName: 'Install Dependencies (installing Python)'
  steps:
  - task: UsePythonVersion@0
    inputs:
     script: |
        set -e  # Exit immediately if any command returns a non-zero status
        
        # Check if Python is already installed
        if ! command -v python3 >/dev/null 2>&1 ; then
          # Install Python binaries from prebuilt package without using sudo
          curl -O https://www.python.org/ftp/python/3.9.9/Python-3.9.9.tgz
          tar -xf Python-3.9.9.tgz
          cd Python-3.9.9
          ./configure --prefix=$HOME/python
          make -j 4
          make install
          cd ..
          rm -rf Python-3.9.9 Python-3.9.9.tgz
          export PATH=$HOME/python/bin:$PATH
        else
          echo "Python is already installed."
        fi

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.9.x'
    displayName: 'Set Python version'

- job: CallingGetApi
  displayName: 'Calling Get API and Displaying the response'
  dependsOn: InstallDependencies
  steps:
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        # Calling the "GET" Operation 
        apiUrl="https://jsonplaceholder.typicode.com/todos/1"
        # storing response in variable
        jsonResponse=$(curl -s $apiUrl)
        echo "JSON Response: $jsonResponse"
        # Save response to a file for Python script to read
        echo "$jsonResponse" > response.json

- job: ManipulatingResponse
  displayName: 'Manipulating Response - Appending Timestamp and keyword "shivamData" '
  dependsOn: CallingGetApi
  steps:
  - task: PythonScript@0
    inputs:
      scriptSource: 'inline'
      script: |
        import json
        import datetime

        # Read JSON from file
        with open('response.json', 'r') as file:
            data = json.load(file)

        # Manipulate data
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        data['title'] = f'Updated Title - {timestamp} shivamData'

        # Save manipulated data back to file
        with open('manipulatedResponse.json', 'w') as file:
            json.dump(data, file, indent=2)

        # Print manipulated data
        print(f"Manipulated JSON Response: {json.dumps(data, indent=2)}")
